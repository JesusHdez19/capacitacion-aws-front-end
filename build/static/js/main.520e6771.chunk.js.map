{"version":3,"sources":["components/Header.js","components/Users.js","components/DisplayBoard.js","components/CreateUser.js","services/UserService.js","App.js","serviceWorker.js","components/AppError.js","index.js"],"names":["Header","style","width","padding","backgroundColor","color","textAlign","Users","users","console","log","length","userTable","map","user","index","key","className","title","content","UserRow","DisplayBoard","numberOfUsers","getAllUsers","type","onClick","e","CreateUser","onChangeForm","createUser","htmlFor","onChange","name","id","aria-describedby","placeholder","a","fetch","method","headers","response","json","data","body","JSON","stringify","App","useState","setUser","setUsers","setNumberOfUsers","useEffect","then","notes","target","value","Boolean","window","location","hostname","match","ErrorComponent","AppError","state","hasError","componentDidCatch","error","info","setState","this","children","props","React","Component","getDerivedStateFromError","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.520e6771.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Header = () => {\r\n\r\n    const headerStyle = {\r\n\r\n        width: '100%',\r\n        padding: '2%',\r\n        backgroundColor: \"red\",\r\n        color: 'white',\r\n        textAlign: 'center'\r\n    }\r\n\r\n    return(\r\n        <div style={headerStyle}>\r\n            <h1>React With NodeJS</h1>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport const Users = ({users}) => {\r\n\r\n    console.log('users length:::', users.length)\r\n    if (users.length === 0) return null\r\n\r\n    const UserRow = (user,index) => {\r\n\r\n        return(\r\n              <tr key = {index} className={index%2 === 0?'odd':'even'}>\r\n                  <td>{index + 1}</td>\r\n                  <td>{user.title}</td>\r\n                  <td>{user.content}</td>\r\n              </tr>\r\n          )\r\n    }\r\n\r\n    const userTable = users.map((user,index) => UserRow(user,index))\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <h2>Notes</h2>\r\n            <table className=\"table table-bordered\">\r\n                <thead>\r\n                <tr>\r\n                    <th>Note Id</th>\r\n                    <th>Title</th>\r\n                    <th>Content</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {userTable}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport const DisplayBoard = ({numberOfUsers, getAllUsers}) => {\r\n\r\n    const headerStyle = {\r\n\r\n        width: '100%',\r\n        padding: '2%',\r\n        backgroundColor: \"red\",\r\n        color: 'white',\r\n        textAlign: 'center'\r\n    }\r\n    \r\n    return(\r\n        <div style={{backgroundColor:'green'}} className=\"display-board\">\r\n            <h4 style={{color: 'white'}}>Notes Created</h4>\r\n            <div className=\"number\">\r\n            {numberOfUsers}\r\n            </div>\r\n            <div className=\"btn\">\r\n                <button type=\"button\" onClick={(e) => getAllUsers()} className=\"btn btn-warning\">Get all Notes</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\n\r\nconst CreateUser = ({onChangeForm, createUser }) => {\r\n\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-7 mrgnbtm\">\r\n                <h2>Create Note</h2>\r\n                <form>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-md-6\">\r\n                            <label htmlFor=\"exampleInputEmail1\">Title</label>\r\n                            <input type=\"text\" onChange={(e) => onChangeForm(e)}  className=\"form-control\" name=\"title\" id=\"title\" aria-describedby=\"title\" placeholder=\"Title\" />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-md-12\">\r\n                            <label htmlFor=\"exampleInputEmail1\">Content</label>\r\n                            <input type=\"text\" onChange={(e) => onChangeForm(e)} className=\"form-control\" name=\"content\" id=\"content\" aria-describedby=\"content\" placeholder=\"Content\" />\r\n                        </div>\r\n                    </div>\r\n                    <button type=\"button\" onClick= {(e) => createUser()} className=\"btn btn-danger\">Create</button>\r\n                </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateUser","\r\nexport async function getAllUsers() {\r\n\r\n    try{\r\n        const response = await fetch('http://44.209.185.255/api/note/all', {\r\n            method: 'GET',\r\n            headers: {'ngrok-skip-browser-warning': '69420'},\r\n        });\r\n        return await response.json();\r\n    }catch(error) {\r\n        return [];\r\n    }\r\n    \r\n}\r\n\r\nexport async function createUser(data) {\r\n    const response = await fetch(`http://44.209.185.255/api/note`, {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json', 'ngrok-skip-browser-warning': '69420'},\r\n        body: JSON.stringify({title:data.title, content:data.content})\r\n      })\r\n    return await response.json();\r\n}","import React, { useState, useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport { Header } from './components/Header'\r\nimport { Users } from './components/Users'\r\nimport { DisplayBoard } from './components/DisplayBoard'\r\nimport CreateUser from './components/CreateUser'\r\nimport { getAllUsers, createUser } from './services/UserService'\r\n\r\nfunction App() {\r\n\r\n  const [user, setUser] = useState({})\r\n  const [users, setUsers] = useState([])\r\n  const [numberOfUsers, setNumberOfUsers] = useState(0)\r\n\r\n\r\n  const userCreate = (e) => {\r\n\r\n      createUser(user)\r\n        .then(response => {\r\n          console.log(response);\r\n          setNumberOfUsers(numberOfUsers+1)\r\n      });\r\n  }\r\n\r\n  const fetchAllUsers = () => {\r\n    getAllUsers()\r\n      .then(users => {\r\n        console.log(users.data.notes)\r\n        setUsers(users.data.notes);\r\n        setNumberOfUsers(users.data.notes.length)\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    getAllUsers()\r\n      .then(users => {\r\n        console.log(users.data.notes)\r\n        setUsers(users.data.notes);\r\n        setNumberOfUsers(users.data.notes.length)\r\n      });\r\n  }, [])\r\n\r\n  const onChangeForm = (e) => {\r\n      if (e.target.name === 'title') {\r\n          user.title = e.target.value;\r\n      } else if (e.target.name === 'content') {\r\n          user.content = e.target.value;\r\n      }\r\n      setUser(user)\r\n  }\r\n  \r\n    \r\n    return (\r\n        <div className=\"App\">\r\n          <Header></Header>\r\n          <div className=\"container mrgnbtm\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-8\">\r\n                  <CreateUser \r\n                    user={user}\r\n                    onChangeForm={onChangeForm}\r\n                    createUser={userCreate}\r\n                    >\r\n                  </CreateUser>\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                  <DisplayBoard\r\n                    numberOfUsers={numberOfUsers}\r\n                    getAllUsers={fetchAllUsers}\r\n                  >\r\n                  </DisplayBoard>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"row mrgnbtm\">\r\n            <Users users={users}></Users>\r\n          </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst ErrorComponent = () => {\r\n  return <h1>Something went wrong</h1>;\r\n};\r\n\r\nexport class AppError extends React.Component {\r\n  \r\n  state = {\r\n    hasError: false,\r\n  };\r\n\r\n  static getDerivedStateFromError = error => {\r\n    return { hasError: true };\r\n  };\r\n\r\n  componentDidCatch = (error, info) => {\r\n    this.setState({ error, info });\r\n  };\r\n\r\n  render() {\r\n    const { hasError } = this.state;\r\n    const { children } = this.props;\r\n\r\n    return hasError ? <ErrorComponent /> : children;\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { AppError } from './components/AppError';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <AppError>\r\n      <App />\r\n    </AppError>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}